
형변환 (casting)
	- 자료형을 다른 자료형으로 변환하는 것을 의미한다.
	- 모든 연산은 기본적으로 같은 자료형들끼리만 수행할 수 있다 .
	- 서로 다른 자료형의 연산을 수행하기 위해서는 같은 자료형으로 변환해야한다 .

	자동형변환(Promotion) 
	작은 자료형 -> 큰자료형

		- 서로 다른 자료형간의 대입이나 연산을 할 때 형변환으로 자료형을 
		  일치시켜야 하지만 다음과 같은 경우 자바의 컴파일러가 자동으로 형변환을 해준다
		- 작은 자료형에서 큰 자료형으로 변환할 때 
			정수형
		byte -> short -> int -> long
			실수형 
		       float -> double

	강제형변환(Demotion) 
	큰자료형 -> 작은 자료형

		- 큰 자료형에서 작은 자료형으로 옮길 때 데이터의 손실이 발생할 수도 있고 아닐 수도 있다.
		- 데이터의 손실이 일어난다면 정확한 연산을 수행할 수 없기 때문에 
		  예상하지 못한 결과를 얻을 수 있으므로 강제 형변환은 항상 주의할 필요가 있다.
	
		ex) byte b1 = 100 ; byte b2 = 110 ;
			byte b3 = (byte)(b1+b2) ; 
			System.out.println(b3) ; // -46

데이터의 입력
	키보드를 통해 다양한 데이터를 자유롭게 입력하는 방법 
	
	- 키보드를 통해 입력하는 데이터를 문자열로 얻기 위해서는 'java.util' 패키지에 있는 Scanner 클래스를 이용해야 한다 .
	- 다른 패키지에 있는 클래스를 사용하려고 할때 import 라는 작업을 해야한다 .
	import 해당클래스의 경로 
	import java.util.Scanner;
	
	Scanner클래스의 객체를 생성 
	Scanner 객체명 = new Scanner(System.in); 

	int 변수명 = 객체명.nextInt(); //정수를 키보드를 통해 입력받는다 .

	정수형	nextByte()		입력받은 값을 byte형으로 반환
		nextShort()	입력받은 값을 short형으로 반환
		nextInt()		입력받은 값을 int형으로 반환
		nextLong()	입력받은 값을 long형으로 반환
	
	실수형	nextFloat()	입력받은 값을 float형으로 반환
		nextDouble() 	입력받은 값을 double형으로 반환
	
	문자형	String nextLine()	입력받은 라인 전체를 문자열 타입으로 반환.enter키로 구분
		String next() 	입력받은 값을 문자열 타입으로 반환. 띄어쓰기로 구분
	

연산자 ( Operator )
	- 연산이란 데이터를 처리하고 결과를 산출하는 작업을 말한다.
	- 연산은 항(피연산자)과 연산자로 이루어진다.
	- 항은 연산에 사용되는 값을 의미하며, 연산자는 기호를 의미한다.
	- 항과 연산자를 이용해 연산 과정을 나열한 것을 연산식(expression)이라고 합니다.

	기본 연산자의 종류
		- 자바는 사칙연산을 비롯해 다양한 연산자를 제공하고 있다.
		- 피연산자의 개수에 따라 단항,이항,삼항 연산자로 분류할 수 있다.
		- 사용 목적에 따라 산술,증감,대입,비교,논리, 비트,증감등으로 분류할 수 있다.

	최고 연산자	. / , / ()			괄호 연산 먼저 계산
	증감 연산자 	++ / --			1씩 증감
	산술 연산자	+ - , * , / ,%		사칙연산, 나머지계산
	시프트 연산자 	>> / << 			비트의 이동  7 >>1 = 0111 0011 	7<<1   = 01111 1110
	비교 연산자	> / < / >= , <= , == , !=	두 값의 비교
	논리 연산자	&& / || / !		논리의 연산
	비트 연산자	& / | / ~ / ^ (캐럿)		비트단위의 논리 연산
	대입 연산자	= / += / -= / = / *= / %=	우변의 값을 좌변에 대입 
	삼항 연산자	조건식? A : B		조건식의 결과에 따라 A와 B 선택 - 조건 ? ( 참 : A ) : ( 거짓 : B)

	단항연산자 	
	단항연산자는 피연산자가 한 개인 연산자를 말하며, 부호연산자(+,-), 증감 연산자(++,--) , 논리 부정 연산자(!)가 있다.
		부호연산자
							
		증감연산자
			-1씩 증가시키거나 1씩 감소시키는 연산자.
				++
				1을 증가시키는 연산자로 피연산자의 값을 1 증가시키는, 피연산자+1과 같은 연산이다.
				--
				1을 감소시키는 연산자로, 피연산자-1과 같은 연산이다.
		논리부정 연산자 
			-boolean값을 가지는 피연산자 앞에 !를 붙여서 값을 반대로 바꾸는 역할을 한다. true를 false로, false를 true로 바꿔준다


	
	이항연산자 
	피연산자가 2개인 연산자를 말한다. 일반적으로 연산자를 가운데 두고 피연산자가 왼쪽, 오른쪽에 위치한다.

		산술연산자
		- 4칙연산(+,-,*,)과 몫을구하는 (/),  나머지 값을 구하는 (%)연산자로 나뉜다.
		- 프로그래밍에서 곱셈은 * , 나눗셈은 /,% 를 사용한다 .

		대입연산자
		-우변의 값을 좌변에 대입을 한다 라고 생각하자
	
	
		복합대입연산자
		-산술연산자와 대입연산자가 합쳐진 형태
		-  +=, -=, *=, /=, %=

	관계(비교)연산자
	- 변수나 상수의 값을 비교하여 참과 거짓을 판단하는 연산자.
	- 결과가 항상 true나 false로 반환된다. (반환을 받는다는건 연산식 자체가 반환값 데이터로 바뀌게 된다)



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
제어문
	- 일반적으로 프로그램에 포함된 실행문은 순차적으로 실행이 된다 .
	- 하지만 순차적으로만 실행한다면 프로그램이 매우 길어지거나 표현하기 어려운 상황이 발생할 수 있다
	- 또한 선택의 개념을 구현하기 힘들다
	
	조건문
	- 조건식에 따라서 프로그램의 흐름을 제어할 수 있는 문법이다 .
	- 삼항연산자에서 미리 봤듯이 , 조건식의 true 또는 false 라는 결과에 따라서 어떤 구문을 실행할지 결정한다 .


	조건문의 종류
		- 조건문에는 크게 if 와 switch가 있다.
		- 고려해야하는 조건이 적으면 if , 많으면 switch를 사용하는것이 효율적이다 .
		- 하지만 특정 개수에 따라 반드시 고정적으로 골라서 써야하는것은 아니다 .

		단순 if문
		- 조건문 중에서도 가장 기본이 되는 명령문이다.
			조건식에는 논리형으로 결과를 확인할 수 있는 모든 식을 넣을 수 있다.

			if(조건식)  조건식이 참일 때 실행할 명령.

				- 자바에서 간결하고 좋은 코드를 만드는 중괄호와 들여쓰기
				- 중괄호 블록은 여러개의 명령을 하나로 묶기위해 작성한다 .
				- 수행문이 하나일 경우 생략할 수 있지만 중괄호를 사용하면 가독성이 좋을뿐아니라 
	  			코드의 해석이 용이하고 버그를 찾아 수정하는데 도움이 되므로 중괄호를 사용하는습관을 길러두는것이 좋다 .
		if-else문
		- 문을 사용하면 조건이 참(true)일때만 흐름을 제어할 수 있다 .
		- 조건이 거짓일 때도 흐름을 제어하고 싶다면 if-else 문을 사용한다 .
		
			if(조건식){
				조건식이 참일때 실행할 명령
			}else{ -> else 에는 조건이 붙지않는다 . 
				조건식이 거짓일때 실행할 명령 
			)

				-

		if-else if 
		- 비교해야할 조건이 여러개 있는 경우 사용하는 문법 
		- if 문안에 두 개 이상의 조건식과 논리연산자로 사용할 수 있지만 
		 코드를 간결하게 하고 가독성을 높이기 위한 방법으로 if - else if 문을 구현한다 
			 
			if(조건식1){
		  	조건식1이 참일 때 실행할 문장.
			} else if(조건식2) {
	  		조건식1이 거짓이고 조건식2가 참일 때 실행할 문장.
			} else if(조건식3){
			  조건식1,2가 거짓이고 조건식3이 참일 때 실행할 문장.	
			} else if(조건식4){
			  조건식 1,2,3 이 거짓이고 조건식 4 가 참일 때 실행할 문장.
			} else {
			  위의 조건이 모두 거짓일 때 실행할 문장
			}
if문의 중첩
제어문은 자유롭게 중첩해서 사용할 수 있습니다.
if문 안에 if문이 있는 경우
if(조건식1){
  if(조건식2){
      조건식1,2가 모두 참일 때 실행할 문장 
  }
}


switch 

	- if 문과 비슷하지만 조건식이 들어가야 하는것과 달리
	- switch에 조건으로 들어갈 수 있는 연산자는 '=='에 없다.
	- 즉 , 두개의 피연산자 값이 같을때만 조건으로 활용할 수 있다 .

		switch (비교값){
		case 조건값1 : 
			비교값과 조건값 1 이 일치할때 실행할 명령
			break; 
		case 조건값2 : 
		 	비교값과 조건값 2 이 일치할때 실행할 명령
			break;	 
		case 조건값3 : 
		 	비교값과 조건값 3 이 일치할때 실행할 명령
			break;
		default : 
			비교값과 일치하는 조건값이 없을 때 실행할 명령 ; 
			break;
		} 









                         