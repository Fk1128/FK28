클래스
	객체지향 프로그래밍 (OOP : Object- Oriented Programming) 
	- 객체를 지향하는 플그래밍 방법
	- 객체란 우리 실생활에 존재하는 모든것으로 생각할 수 있다 .
	- 객체는 상태를 표현할 수 있고 , 행동을 정의할 수 있다 .
	- 객체를 중심으로 프로그램 구조를 설계하고 프로그래밍 하는 것을 객체 지향프로그래밍 이라고 한다 .

	클래스란 ? 
	- 객체를 생성하기 위한 설명서
	- 물건을 만들기 위한 메뉴얼 
	- 클래스를 기반으로 객체를 생성한다 . ex ) Scanner , Random

	클래스의 선언
		접근 제한자 class 클래스명 {
	
		}

		접근제한자 : 해당 클래스의 접근 범위를 제한하는 키워드 .
		class : class 를 선언함을 뜻한다 .
		class명 : 변수처럼 이름을 가지고 , 객체를 생성할 때 사용한다 .

		 ※그동안 사용해왔던 클래스는 "실행용"클래스로, 프로그램의 실행을 전적으로 맡고 있다.

	클래스의 종류 
		1. 실행용클래스
			- 프로그램 전체에서 단 하나의 클래스로 , 프로그램의 실행을 맡고있다
			- 메인 메서드를 갖고있으며 , 다른클래스에서 사용되지 않는다 .
		2. 객체생성용 클래스
		- 다른 클래스에서 사용할 목적으로 선언되는 클래스 .

	클래스 이름을 작성하는 규칙

		- 클래스의 첫글자는 대문자를 사용한다 .
		- 숫자를 사용할 수 있으나 , 첫글자로는 사용할 수 없다 .
		- 특수문자는 $,_ 만 가능하다. 
		- 자바 예약어는 사용할 수 없다 . 


	클래스의 구성 
		- 클래스를 구성하는 요소는 필드 , 메서드 , 생성자 3가지밖에 없다 .

	필드(field) 
		- 객체가 가져야할 데이터의 상태를 저장하는 변수 
		- 필드, 전역변수 ,멤버 변수 라고 부를 수 있다 .
		- 필드의 값을 초기화 하지 않으면 객체 생성시 자동으로 
		기본값으로 초기화한다 .



메서드 . (method)

	-객체의 기능을 담당하는 중괄호 블록을 말한다
	- 특정 기능을 수행하는 코드를 따로 중괄호 안에 작성하며, 
	1개의 메서드는 일반적으로 1개의 기능을 수행한다

메서드의 선언
반환형 메서드명(파라미터){
	기능작성하기
	return 반환값 ;
}

	상황에 따라서 필요하지 않다면 파라미터와 return값은 없어도 된다 .

 
	 메서드의 사용 
			 - 구현된 메서드를 사용하는 방법은 필드의 사용법과 동일하다 .
			 - 메서드를 선언한 클래스 안에서 메서드를 사용할 때는 단순히 메서드명만
			 - 호출하면 되지만, 다른 클래스에서 메서드를 사용하려면 객체를 생성 한 후 
			 - 참조 변수를 이용해 그 객체의 메서드를 사용해야 한다 .
			 - 객체가 존재 해야 메서드도 존재하기때문이다 .
			 
			 
			-  변수명.메서드명(); 생성한 객체의 메서드 호출 
	함수의 작동 원리 
		- 메서드를 호출하면 블록 안에 있는 코드들이 위에서 순차적으로 모두 실행되고 경우에 따라 실행한 결과를 호출한 곳으로 돌려준다.		 
		- 이를 '반환한다'라고 표현하고, 반환하는 결과값을 '반환값(리턴값)'이라고 한다.
		- 리턴값이 있을 경우에는 리턴할 데이터의 타입이 무엇인지 메서드명()앞에 반환 타입을 기재해줘야 한다.
		- 반환형은 메서드가 처음부터 끝까지 수행을 마친 후에 반환해야 할 값이 있을 경우에 기입.
		- int, String, boolean등 기본자료형을 포함하여 사용자가 만든 객체로도 반환이 가능.
		- 아무것도 반환하지 않을때는 void

		- 클래스명 객체명 = new 클래스명(); //객체의 생성
		- 객체명.메서드명();//생성한 객체의 메서드 호출(사용)
	

	메서드의 이름짓기
		- 기능을 명확하게 설명해줄 수 있는 이름이 좋다 .
		- 메서드명을 작성하는 규칙은 변수를 작성하는 규칙과 동일한다 .



생성자 (constructor)
	-객체를 생성할 때 반드시 호출해야 하는 특수한 기능을 가진 메서드 .
	- 이 메서드는 객체를 생성하면서 객체 변수를 초기화 하는 역할을 하기 떄문에 
	생성자 라고 부른다 .
	
	클래스명 객체(변수)명 = new 클래스명();  // new : 메모리에 객체를 올리기위한 공간 할당 .// 클래스명(); 생성자의 호출

	생성자를 한번도 정의한 적이 없음에도 불구하고 호출해서 객체를 생성해왔다 .
	이게 가능한 이유는 우리가 직접 선언하지 않아도 '기본 생성자' 가 자동으로 생성되고 우리 눈에만 보이지 않기 때문이다 .


정적멤버 와 static
	- 클래스 안에서 선언된 필드와 매서드를 클래스 멤버라고도 부른다 .
	- 클래스에 포함된 요소라는 의미로 '멤버' 라는 용어를 사용한다 .
	- 객체들이 각각 갖기 때문에 멤버라고 부른다 .


	정적멤버
		- 필드와 메서드를 선언할 때 static이라는 키워드가 붙은 멤버를 말한다 .
	
	static
		- 사전적으로 '고정된' 이라는 뜻을 가지고있다 .
		- 프로그래밍 언어에서 static 은 '클래스에 고정되었다' 라는 의미로 사용되고있다 .
		- 쉽게말해 객체가 아닌 클래스에 의존적인 요소라고 생각하면된다 .
		- 멤버 앞에 static 키워드를 붙히게 되면 , 다른 멤버들과 달리
		- 객체를 생성하지 않고 바로 사용할 수 있다 .
		- 그 이유는 객체를 생성할 때 메모리에 올라가는 것이 아니라, 프로그램이 
		- 실행될 때 메모리에 올라가고 프로그램이 종료될 때 메모리에서 사라지기 때문이다 


메서드

	메서드 사용의 이점
		- 메서드를 구현함으로써, 같은 내용의 코드를 반복적으로 사용하는것을
		피할 수 있다.
		- 필요할 떄마다 재사용을 할 수 있다 .
		- 코드의 집합을 따로 분리하는 것을 "모듈화" 라고 한다 .
		- 모듈화를 하면 코드를 읽을 때 가독성이 좋아지며 , 프로그램을 수정할 때 더욱 빠르고 쉽게 할 수 있다 .	


	메서드의 선언
	- 메서드는 크게 선언부(signature) 와 실제 영역(body) 로 구성이 되어있다 .

	접근제한자 반환형 메서드명(){
		기능을 수행하는 코드
	}


	※ 접근제한자
		- 클래스 / 메서드 / 필드 에 대한 접근을 어느범위까지 제한하느냐에 대한 키워드 

	1. public : 모든 접근을 허용 . 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용 
	2. private : 현재 클래스 내에서만 사용을 허가
	3. protected : 상속관계의 객체들에서만 사용을 허가 
	4. default : 같은 패키지 (폴더) 내의 객체에만 사용을 허가 (아무것도 쓰지 않으면 자동으로 default) 


	반환타입 (return Type)
	- 메서드를 호출하면 블록 안에 있는 코드들을 실행한 후 결과값을 반환한다 .
	- 이때 결과값을 어떤타입으로 반환할것인지 미리 정해주는 것이다 .
	- 반환값이 없는 경우 타입으로 'void' 를 쓰면 된다 .

메서드명(함수명)
	- 메서드명은 말 그대로 메서드의 이름 (첫글자는 소문자로 시작한다.)
	- 메서드를 호출할 때 사용한다 .

매개변수 (파라미터 )
	- 특정 기능을 수행하기 위한 메서드는 기능을 수행할 때 필요한 값(인수)를 전달받을 수 있다.
	- 매개변수는 사용할 값을 받는 변수이다.

		접근제한자 반환형 메서드명(자료형 변수명, 자료형 변수명) {
			// 기능을 수행할 코드
		}


return
- 메서드에서 모든 작업을 마치고 경우에 따라 실행한 결과를 호출한곳으로 
다시 돌려주기도 한다 .
	- 이것을 '반환한다' 라고 표현한다 .
	- 반환하는 결과값을 ' 반환값' 이라고 한다 .
	- 반환값이 있는경우 반환할 데이터의 타입에 따라 반환형에 명시해줘야 한다 .
	- 반환값이 없는경우 메서드를 종료하기 위해 return을 사용할 수 있다 .

	- 매개변수와 마찬가지로 리턴값의 자료형은 제한이 없다 .
	- 자바에서 사용하는 모든 자료형을 반환타입으로 사용할 수 있다 .






Start 클래스를 생성하고 1~50 사이의 난수를 발생시킨다 .
StartMain 클래스를 만들고 사용자가 키보드를 통해 정수를 입력받는다
Start 클래스에서 사용자가 입력한 숫자를 판단하여 발생한 난수보다 크다면 Down 작다면 Up을 출력
사용자가 입력한 숫자와 발생한 난수가 같을경우 프로그램을 종료시키며 몇회만에 정답을 맞추는지 카운트하기 


정리

클래스 - 프로그램의 최소단위     1개의파일에 여러개의 클래스를 정의하는게 가능하다 ./

객체를만들기위한 정보가 들어있다	



클래스 (첫글자는 대문자 )
	실행용 -> mian()메서드 다른곳에서 사용x
	프로그램당 1개
	참조용 -> 객체 생성용 ,상태와 기능의 정의 , 다른곳에서 사용O
	여러개 존재가능 


클래스의 구성요소 	- 변수 ( 필드 , 멤버 ) 
		- 메서드 
		- 생성자 (특수한기능을가지는 메서드 )? 
	
	필드(멤버)  : 각 개체가 가지는 변수 
static	클래스 변수 (정적 변수 )  : 모든개체가 가져야하는 변수 //  클래스명.변수명
 (정적인 ,고정된)	
정적 메서드 : 클래스명.메서드명 () ;
			
public class 클래스명 {        		상태와 		기능 
			멤버변수				메서드
		   	필드 	일종의 설계도		
			객체변수      메뉴얼
			
}
class 클래스명 {  // 여러개의 클래스생성시.

}


메서드 
접근제한자	반환형	메서드명 (매개변수) {
} 
ex ) public void main() {
 
}
접근제한자 public, private, protected, default 
반환형 : 기본자료형  반환값이필요할때 return 사용 





