파일 입출력 
	- 프로그램은 데이터를 외부에서 입력받아 처리하고 출력하는 구조로 되어있다 .
	- 프로그램으로 들어오는 모든 값을 Input 이라고 한다 
	- 프로그램을 나가는 모든 값을 Output 이라고 한다 
	- 자바에서는 입출력을 처리하기 위해 별도의I/O 패키지를 제공한다
	- 데이터는 자바에서 처리할 수 있는 모든것을 의미한다.
	- 디스크상에 존재하는 데이터일수도 있고 , 키보드나 마우스와 같은 외부 입력장치에서 입력되는 데이터일수도 있고 인터넷을 통해 전송되는 데이터를 일 수 도있다 .
	자바가 디스크를 접근해 데이터를 주고받는 작업을 도와주는 통로를 '스트림 stream ' 이라고 한다 .


입출력 스트림
	- 자바의 입출력은 java.io 패키지에서 제공한다
	- java.io패키지에서는 파일시스템의 정보를 얻기위해 File클래스와 데이터 입출력을위한 다양한 클래스를 제공한다.
	- 스트림의 종류를 크게 분류하려면 전달 방식에 따라 바이트 (byte) 기반 스트림과 문자(char) 기반 스트림으로 구분한다 .

	바이트 기반의 스트림 데이터를 컴퓨터의 기본단위인 byte 단위로 나눠 읽거나 쓴다
	문자 기반의 스트림 텍스트기반 문서를 다루기 위해 사용하는 스트림  

바이트기반의 스트림 
	컴퓨터의 모든 데이터는 바이트(byte)단위로 이루어져 있다.
	따라서 바이트 기반 스트림의 경우 모든 타입의 데이터를 읽고 쓰는 것이 가능하다.
	바이트 기반의 스트림은 바이트 입력 스트림과 바이트 출력 스트림이 있다.

	InputStream 
	바이트 기반의 입력 스트림은 최상위 클래스로 InputStream객체가 제공된다.
	해당 객체를 상속해 다양한 입력 스트림들이 존재한다.
	각자의 개발 목적에 맞게 선택하여 사용할 수 있다 .

InputStream 의 주요 메서드
메서드					설명
int read()				문자를 1byte씩 읽고 반환
				더 이상 읽을 문자가 없으면 -1을 반환

int read(byte[]b)			매개변수로 주어진 배열에 읽은 문자를 저장하고 실제로 읽은 수만큼 반환
				더 이상 읽을 문자가 없으면 -1을 반환

int read(byte[],int offset,int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 저장
시작 위치(offset), 길이(len)

int available()			스트림으로부터 읽어올 수 있는 데이터의 크기를 반환
close()				스트림 사용을 종료하고 자원을 반환


FileInputStream
- 파일을 바이트단위로 읽어들일 때 사용하는 스트림
- 이미지 동영상 텍스트 등 모든타입의 파일을 읽어올 수 있



OutputStream
- 바이트 기반의 출력스트림은 최상위 클래스로 OutputStream 객체가 제공된다 .
- 해당 객체를 상속해 다양한 출력 스트림들이 존재한다 .


OutputStream의 주요 메서드
메서드				설명
int write(int b)			1byte 출력
int write(byte[]b)			매개변수로 주어진 배열의 모든 바이트 출력
int write(byte[],int offset,int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 출력
시작 위치(offset), 길이(len)
int flush()				출력 버퍼에 장류하는 모든 내용 출력
close()				스트림 사용을 종료하고 자원을 반환



FileOutputStream
- 파일을 쓸 때 기존 파일명이 존재하는 경우가 있다 .
- 이 때 해당파일의 내용을 유지한채 이어 쓰거나 기존의 내용을 무시하고 새롭게 파일을 생성할 수 있다 .



문자 기반 스트림
- 자바에서 기본 자료형은 char 형을통해 문자를 저장할 수 있다 .
- 1byte 단위로 처리하는 바이트 기반 스트림은 모든형식을 다룰 수 있으나 
문자를 처리하는 char형의 크기는 2byte로 별도의 처리를 하지 않으면 정상적으로 읽지 못하는경우가 있다 .
- 이때 , 문자 기반의 스트림을 사용하면 간단하게 문자를 처리할 수 있다 .
- 텍스트의 경우 문자기반의 스트림을 이용하여 읽는 경우가 많다 .

Reader
- 문자기반 입력 스트림은 최상위 클래스인 Reader를 상속해 다양한 클래스를 제공한다 .

문자기반 스트림에서 제공하는 메서드

메서드				설명
int read()				1개의 문자를 읽고 반환
				더 이상 읽을 문자가 없으면 -1를 반환
int read(char[] buf)			매개변수로 주어진 배열에 읽은 문자를 저장하고 읽은 수만큼 반환
				더 이상 읽을 문자가 없으면 -1를 반환
int read(char[] buf,int offset,int len)	매개변수로 주어진 배열에 정해진 범위만큼 읽어서 저장
시작위치(offset),길이(len)
close()				스트림 사용을 종료하고 자원을 반환




보조스트림
- 스트림은 기능에 따라 기반스트림과 보조 스트림으로 구분한다 .
- 기반 스트림 : 대상에 직접 읽고 쓰는 스트림이다 .
- 보조 스트림 : 직접 읽고 쓰는 기능없이 기반스트림에 추가로 사용할 수 있는 스트림이다.


보조스트림만으로는 데이터를 주고받을 수 없다 .
스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로 여러 보조스트림을 중첩하여 사용하는것은 가능하다 .

- 보조스트림 사용하는 법  :
- 보조스트림을 사용하려면 기반 스트림을 먼저 선언해야한다 .

보조스트림 변수명 = new 보조 스트림 (기반스트림객체 ); 

성능향상 보조스트림 
- 느린 하드디스크와 네트워크는 입출력 성능에 영향을 준다 .
- 이때 입출력 소스와 직접 작업하지 않고 버퍼라는 메모리를 이용해 작업을하면 싱행성능을 향상시킬수있다 .
- 하지만 버퍼의 크기는 작아 많은양의데이터를 처리하기에는 부족하다.
- 보조스트림 중에는 메모리 버퍼를 추가로 제공하여 스트림의 성능을 향상시켜주는것들이 있다 .

바이트 기반의 스트림
BufferedInputStream,BufferdOutputStream
문자 기반의 스트림
BufferedReader,BufferedWriter















