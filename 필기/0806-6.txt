setter & getter 
- 지금까지 객체의 필드를 객체의 내부 뿐만 아니라 객체 밖에서도 마음껏 사용할 수 있었고, 
마음대로 값을 바꿀수도 있었다 .

- 필드에 마음대로 접근할 수 있고, 값을 변경할 수 있으면  문제가 생길 가능성이 있다 .

- 메서드를 통해 필드의 값을 설정하거나 불러오는 방법을 이용한다 

	
	메서드를 통해 필드에 접근할 때 장점
	- 필드를 보호할 수 있다 .
	- 메서드에서 필드에 들어갈 값을 검증한 후 대입할 수 있다 .
	- 외부에서 사용할 필드의 값을 정제한 후 값을 사용할 수 있다 .

setter 	(set)	값을 세팅한다 	
	(get)	값을 얻어온다
	- 외부에서 메서드를 통해 데이터에 접근하고 검증할 수 있도록 유도하는 메서드의 개념 

getter 
	- praivate 필드를 객체 외부에서 값을 불러오기 위해 구현하는 메서드 
	- praivate 필드는 객체 외부에서 접근이 불가능하지만 , 필드가 선언된 클래스에서는 어디서든 접근이 가능하다 .
	- 따라서 메서드를 통해 값을 전달해줄 수 있다 .


생성자 (constructor) 
- 객체를 생성할 때 호출되어 객체의 초기화를 담당하는 특별한 메서드이다.
- 객체를 생성하고 초기화 하기 위해서는 반드시 생성자를 호출해야한다 .
- 따라서 객체를 생성해야 하는 참조용 클래스는 모두 생성자를 갖고 있다 .

생성자의 정의 
- 생성자는 반환값이 없지만, 반환타입을 아예 작성하지 않는다 .
- 객체의 필드를 초기화 하기 위한 데이터를 매개변수를 통해 전달 받을 수 있다 .

형태 
접근제한자 클래스명 (매개변수1,매개변수2 .... ) { // 생성자명은 반드시 클래스명을 입력해야만한다 .

}

생성자의 호출위치
	- 일반 메서드들과는 다르게, 생성자를 호출하는곳이 정해져있다 .
	- 생성자는 클래스를 기반으로 객체를 생성할 때 , 객체의 초기화를 담당하는 역할을 하므로 객체를 생성할떄만 호출할 수 있다 .

생성자 호출방법 
	- 생성자를 호출할때는 new 키워드를 함께 사용한다 .

	클래스명 변수명 = new 클래스명 () ;  클래스명(); - 생성자의 호출 

상속(inheritance)
- 부모가 자식에게 무언가를 물려주는것을 상속이라고 하고 , 자바에서도 부모 역할을 하는 클래스가 
자식역할을 하는 클래스에게 멤버변수와 메서드를 물려주는것을 상속이라고 한다 .
- 상속은 클래스를 재활용하기 떄문에 중복을 줄여주고 수정을 최소화하는 특징을 가지고 있다 .

	- 상속해주는클래스 : 부모클래스 , 상위클래스 , 기반클래스 
	- 상속받는 클래스 : 자식클래스 , 하위클래스 , 파생클래스 
	
- 자바에서 상속을 구현하는 방법은 자식클래스를 선언할 때 , extends 라는 키워드를 사용해 상속받은 클래스를 명시한다 .
- 자식 클래스에서 선택받은 클래스는 부모 클래스 역할을 하게된다 .

상속에서의 생성자 
	- 자식클래스의 객체를 생성할 때, 자식 클래스는 자식의 생성자를 통해
	자식 객체를 생성한다 .
	- 특별한 역할을 하지 않는 기본생성자는 비어있는 것이 맞다 .
	- 하지만 자식클래스의 기본생성자는 다르다 .
	- 필드 초기화와 같은 특별한 역할을  하고 있지 않더라도 super()라는 메서드를 가지고 있다 .

super()
this () 	-> 같은 클래스의 다른생성자를 호출할 때 사용하는 키워드
super() 	-> 부모 클래스의 생성자를 호출할 때 사용하는 키워드 
	- 자식클래스로 객체를 생성하기 위해 기본생성자가 호출되면 , super() 메서드를 통해 Book(부모클래스)의 기본생성자를 호출한다 .
	- 부모객체를 감싸고 자식객체가 생성된다 .
	- 자식객체 안에는 부모객체가 들어있게 된다 .


오버라이딩 (Overriding)  
- 부모클래스에서 상속받은 자식클래스는 부모클래스의 필드와 메서드를 가져와서 그대로 사용할 수 있다 .
- 하지만 필요하다면 , 자식클래스가 상속받은 메서드의 내용을 변경해서 사용할 수 있다 .
-우리는 이렇게 상속받은 메서드를 변경해서 다시 구현하는 것을  오버라이딩 (Overriding) 이라고 합니다 .

오버라이딩 규칙
1. 부모클래스의 메서드명, 반환형, 매개변수까지 동일해야한다 .
2. 부모클래스의 메서드보다 접근 제한 범위를 넓힐수는 있으나 좁힐수는 없다 .

@Override 어노테이션
- 자바에서 @를 어노테이션 이라고 부른다 
- 주석과 마찬가지로 코드를 실행하는데 직접적인 영향을 미치지는 않는다 .
- 자동완성으로 오버라이딩을 구현하면 ,@Override 메서드가 상단에 추가된다 .
- 생략해도 괜찮지만, 컴파일러에게 오버라이딩된 메서드라고 한번 더 짚어줌으로써 오타가 났을때 오류를 발생시켜주기때문에 
실수를 줄일 수 있다.


메서드 (함수)
	자주사용하는 기능을 묶어놓은것
	접근제한자 반환형 메서드명 ( 매개변수 ('선언형태'/자료형 변수명) ) {
			실행코드

		(반환할값이 있으면 ) return 반환값 ; 반환형과 타입을 일치시킨다
}

									main 호출시 -	객체명.메서드명 () ;
										호출값을 변수에 담아두는것도 좋은방법이다 .




getter & setter (메서드의일종)  필드의 값을 검증하고 세팅

필드는 밖에서 (다른클래스에서) private 으로 지정 

getter 필드에 세팅된값을 반환




  초기화 : 초기값을 지정한다 
      생성자                             메서드
	필드값을 초기화 할 수 있음.
생성자명=클래스명	(대문자)    메서드명 -ㅁㅏ음대로 지어도됨
호출 객체 생성시 new와 함께		호출 (여러번O)
반환값 X			 반환값 (O or X )
반환형(타입) X		 반환형 : 값에따라 결정 (자료형) , 반환값이 없을시 void

생성자를 통해서 필드를 초기화 하면 
생성되는 객체마다 값을 다르게 넣어줄 수 있다 .

오버로딩

같은 이름의 메서드or생성자 를 중복해서 정의하는것 
※
1. 메서드명or생성자명 이 같아야한다 .
2. 매개변수의 개수가 달라야 한다 .
3. 매개변수의 개수가 같을 때 자료형이 달라야 한다 .


상속 
부모클래스  -> 상속해주는 클래스 
부모의 멤버,메서드를 상속을해준다

자식클래스  -> 상속받는 클래스 	extends 상속받을클래스 
다시 정의하지않고 부모의 멤버,메서드를 사용할 수 있다 .

부모클래스
class Parent{ 

}

자식클래스 
class Child  extends Parent [

}

오버라이딩 
- 부모에 정의도니 메서드를 자식의 상황에 맞게 재정의 하는것

1. 메서드명,반환형,매개변수 모두 같아야한다 .
2. 내용만 달라야한다 .
3. 접근제한자는  부모의 메서드보다 좁은범위는 가능하다 

















