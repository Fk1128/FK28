
CONCATENATION (연결)
java에서  연결 연산자를 사용하듯이
|| (연결기호) 를 사용할 수 잇다

ALIAS(AS)
별칭( 컬럼의 길이나 식이 너무 길다면 대신 사용할 수 있다 .)
SELECT절 
- AS 뒤에 별칭 작성하기
- 컬럼명 뒤에 작성하기
 
FROM 절에 테이블명 뒤에 한칸 띄우고 작성 .

별칭의 특징
- 테이블에 별칭을 줘서 컬럼을 단순, 명확히 할 수 있다 .
- 현재 SELECT 문에서만 유효하다 .
- 테이블 별칭은 30자까지 가능하나 짧을수록 좋다 .
- 테이블 별칭에는 의미가 있어야한다 .
- FROM절에는 테이블 별칭 설정시 해당 테이블 별칭은 SELECT문장에서 테이블 이름대신 사용한다 .


JOIN 
- 데이터베이스에서 '두개 이상의 테이블' 을 연결하여  '하나의 결과 테이블' 로 만드는것을 의미한다.
- 이를통해 데이터를 효율적으로 검색하고 처리하는데 도움을 준다 .
- JOIN을 사용하는 이유는 데이터베이스에서 테이블을 분리하여 '데이터의 중복을 최소화' 하고 ' 데이터의일관성'
을 유지하기 위함이다 . 
- 여러가지 JOIN방식이 있으며 JOIN 방식에 따라 결과가 달라진다 .

JOIN의 종류
1. Inner Join
- 각 테이블에서 조인 조건에 일치되는 데이터만 가져온다 .
- A와 B테이블의 공통된 부분을 의미한다 .
- 보통 교집합 이라고 부른다 .

select * from 테이블 A INNER JOIN 테이블명 B  ON 조건식 - INNER 생략가능

select * from 테이블 A JOIN 테이블명 B  ON 조건식 JOIN 테이블명C ON 조건식

pk와 fk로 연결되어있는 테이블끼리 join을 한다 (관계를 맺고있는 테이블끼리 해야함 )

self inner join 
- 하나의 테이블에서 다른 컬럼을 참조하기 위해 사용하는
- 자기 자신과의 조인방법이다 .
- 이를통해 데이터베이스에 한 테이블 내의 값을 다른값과 연결할 수 있다 .

SELETE 테이블1.열, 테이블2.열
FROM 테이블1 T1
JOIN 테이블 T2
ON 테이블1.열 = 테이블2.열 ;

CROSS INNER JOIN
- 두 개 이상의 테이블에서 '모든가능한조합' 을 만들어 결과를 반환하는방법
- 이를통해 두개 이상의 테이블을 조합하여 새로운 테이블을 생성할 수 있다 .
- CROSS JOIN은 일반적으로 테이블 간의 관계가 없을 때 사용한다 .
- 각행의 모든 가능한 조합을 만들기 때문ㅇ ㅔ결과가 매우 큰 테이블이 될 수 있으므로 사용에 주의가 필요하다 .

OUTER JOIN
OUTER JOIN은 두 테이블에서 '공통된 값을 가지지 않는 행들' 도 반환

LEFT OUTER JOIN
'왼쪽 테이블의 모든행' 과 '공통된 값' 을 가지고 있는 행들을 반환한다.
- 만약 오른쪽 테이블에서 공통된값을 가지고 있는 행이없다면 NULL값을 반환한다.

SELECT*FROM 테이블A LEFT OUTER JOIN 테이블B 
ON 테이블A.컬럼 = 테이블B.컬럼 

RIGHT OUTER JOIN

상황에따라 어떤걸 사용해야하는지는 다르지만
대부분의 경우 왼쪽 테이블의 데이터를 기준으로 분석 할 때가 많기떄문에 LEFT OUTER JOIN을 보통 사용한다 .

FULL OUTER JOIN 
두 테이블에서 '모든 값 ' 을 반환한다 .
- 만약 공통된 값을 가지고 있지않는 행이 있다면 NULL값을 반환한다 .
- 합집합의 연산 결과와 같다 .
- 양쪽 테이블 데이터 집합에서 공통적으로 존재하는 데이터 , 한쪽에만 존재하는 데이터 모두 추출한다 .


VIEW
하나 이상의 테이블이나 다른 뷰의 데이터를 볼 수 있게하는 데이터베이스 객체
실제 데이터는 뷰를 구성하는 테이블에 담겨있지만 마치 테이블 처럼 사용할 수 있다 .
테이블 뿐만 아니라 다른 뷰를 참조해 새로운 뷰를 만들어 사용할 수 있다 .

VIEW의 사용 목적 
- 여러개의 테이블 에서 필요한 정보를 가져다 사용할 때가 많다 .
- VIEW를 사용하면 복잡한 쿼리문을 간단하게 만들어준다 .
- 여러 테이블이 JOIN과 GROUP BY와 같이 복잡한ㅋ ㅝ리를 VIEW로 저장시켜 놓으면 다음부터는 저장한 VIEW만 호출하면 된다 .

VIEW의 특징
독립성
- 원본 데이터가 변경되어도 뷰를 사용하는 응용 프로그램은 변경하지 않아도 된다 .
편리성
- 복잡한 쿼리문을 뷰로 생성함으로써 관련 쿼리를 단순하게 작성할 수 있다 .
보안성
- 숨기고 싶은 정보가 존재한다면 , 뷰를 생성할 때 해당컬럼을 빼고 생성함으로써 정보를 감출수 있다 .

뷰의생성
CREATE VIEW 뷰이름 AS(
	쿼리문
)

뷰의 수정
OR REPLACE : 기존의 정의를 변경하는데 사용할 수 있다 .
CREATE OR REPLACE VIEW AS(
	쿼리문
);


DROP VIEW 뷰이름 RIISTRICT OR CASCADE
RESTRICT : 뷰를 다른곳에서 참조하고 있다면 삭제가 취소됨
CASCADE : 뷰를 참조하는 다른 뷰나 제약조건까지 모두 삭제 

TCL(Transaction Control Language)
트랜잭션 제어어

트랜잭션
데이터베이스의 작업을 처리하는 논리적 연산 단위
- 쿼리문 하나가 트랜잭션임 .

트랜잭션의 특성
원자성(ATOMICITY)
원자와같이 데이터베이스 연산들이 나눌수도 ,줄일수도 없는 
하나의 유닛으로 취급됨
트랜잭션에 정의된 연산들은 모두 실행되던지 , 실행되지 않던지 해야함 .

일관성 (Consistency)
데이터베이스의 트랜잭션이 제약조건, cascade를 포함한
정의된 모든 조건에 맞게 데이터 값이 변경됨 .

고립성(Isolation)
특정 DBMS에서 다수의 유저들이 같은 시간에 같은 데이터에 접근하였을 때 
수행중인 트랜잭션이 완료될때까지 다른트랜잭션의 요청을 막음으로서 데이터가 꼬이는걸 방지한다 .

영속성,지속성(Durability)
트랜잭션 실행이 성공적일 때 , 그 트랜잭션이 갱신한 데이터베이스 내용은 영구적으로 저장됨 .


TCL의 종류

COMMIT
- DML로 변경된 데이터를 데이터베이스에 적용
- COMMIT문 사용시 이전 데이터는 영원히 지워짐
- COMMIT문 사용시 모든 사용자가 변경된 데이터 확인가능 

사용법 COMMIT;


ROLLBACK
- DML로 변경된 데이터를 변경이전상태로 되돌릴 때 사용 
- 이전의 데이터를 다시 저장 . COMMIT 되기전에만 ROLLBACK가능
사용법 ROLLBACK;

SAVEPOINT 
- 전체 트랜잭션을 ROLLBACK하지않고 현시점에서 SAVEPOINT 까지 일부 트랜잭션만 오류 복귀 가능 
- 복잡한 대규모 트랜잭션에서 에러가 발생했을 때 주로 사용  
- 복수의 저장점 정의 가능 . 저장점까지 롤백할 때는 "ROLLBACK TO 저장점 ;" 사용

사용법 : SAVEPOINT 저장점명 ;
ROLLBACK TO 저장점명 ;



0829 오전정리
SUBQUERY
FROM절 : IN LINE VIEW  테이블처럼 사용
SELECT절  SCALAR: 컬럼처럼 사용
WHERE : SUB QUERY 값 , 표현식처럼 사용

JOIN
두개 이상의 테이블을 연결하여 하나의 결과를 반환하는테이블로 만드는것 


1-1 . SELF INNER JOIN
하나의 테이블에서 서로다른 컬럼을 참조하는것

1-2 CROSS INNER JOIN
모든 가능한 조합을 만들어 반환하는 JOIN방법 












































