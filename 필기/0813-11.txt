컬렉션 프레임워크(Collection FrameWork)
	- 배열의 경우 한번 정한 크기를 변경하거나 삭제할 수 없다.
	- 또한 별도의 기능이 없기 때문에 직접 index를 이용해 데이터를 저장해야한다 .
	- 자바는 이러한 불편함을 해결하기 위해 필요한 자료구조를 미리 구현하여 java.util 패키지에서 제공하고있다 .
	- 이를 컬렉션 프레임워크라고 한다 .
	- 컬렉션은 기존에 있던 자료구조 List(리스트),Queue(큐),Tree(트리) 등의 자료구조를 의미한다 .


	List 
	- 순서가 있는 데이터의 집합
	- 데이터의 중복 허용 
	- ArrayList, LinkedList

	Set
	- 순서를 유지하지 않는 데이터의 집합
	- 데이터의 중복 허용X
	- HashSet,LinkedHashSet
	
	Map
	- 키(key) 와 값(value) 의 쌍으로 이루어진 데이터의 집합
	- 순서가없음 , 키는 중복X , 값은 중복O
	- HashMap,LinkedHashMap ,Properties


제네릭
	- JDK1.5 이전에는 여러타입을 사용하는 대부분의 클래스나 메서드의 반환값으로 Object타입을 사용했다.
	이러한경우 잘못된 캐스팅으로 인해 런타임 오류가 발생할 가능성이 있다 .
	제네릭을 사용하면 컴파일 할 때 미리 타입이정해지므로 타입 검사나 변환과 같은 번거로운 작업을 생략할 수 있다 .
	클래스나 메서드 내부에 사용될 데이터타입의 안정성을 높일 수 있다 .

	- 클래스 내부에서 사용할 데이터의타입들을 외부에서 지정하는 기법이다 .
	- 객체별로 다른타입의 자료가 저장될 수 있도록한다

	Generic 선언 및 생성
	제네릭타입은 타입을 파라미터로 가지는 클래스와 인터페이스를 말한다 .
	클래스 또는 인터페이스 이름뒤에 <>(다이아몬드 연산자) 기호를 추가하고 안에 식별자 기호를 지정하여 파라미터화 할 수 있다 .
	이것을 마치 메서드가 매개변수를 받아 사용하는 것과 비슷하게 제네릭의 '타입 매개변수(parameter)' '타입 변수' 라고부른다 .

	public class 클래스명 <T>{ ... }
	public interface 인터페이스명<T>{ ... }


	제네릭 기호를 위와 같이 T를 써서 표현했지만 사실 식별자 기호는 문법적으로 정해진것은 없다.
	다만 우리가 for문을 이용할 때 루프 변수를 i로 지정해서 사용하듯이, 제네릭의 표현변수를 T로 표현한다고 보면 된다.
	만일 두번째, 세번째 제네릭이 필요하다고 하면 S,U로 이어나간다 ,
	명명하고 싶은대로 아무 단어나 넣어도 문제는 없지만, 
	대중적으로 통하는 통상적인 네이밍이 있으면 개발이 용이해지기 때문에 암묵적인 규칙(convention)이 존재한다.
		타입	설명
		<T>	타입(Type)
		<E>	요소(Element)
		<K>	키(Key)
		<V>	값(Value)
		<N>	숫자(Number)


List 컬렉션
	- 배열과 유사한 자료구조로 중복이 허용되면서 저장순서가 유지되는 구조를 제공
	- 배열처럼 index를 사용해 데이터를 저장하고 찾게된다 .
	- 단, 배열과는 다르게 크기의 제한이 없으며 삽입,삭제,변경의 기능이 자유롭다 
	- 데이터의 크기를 특정할 수 없는 다량의 데이터를 저장할 때 용이하게 사용할 수 있다 .


	List 에서 제공하는 주요 메서드

	void add(E e)		삽입  		데이터를 순차적으로 삽입 // E 제네릭 타입중 하나
	void add(int index,E e)	중간삽입		원하는 index 위치에 삽입
	void set(int index,E e)	치환		원하는 index 위치에 값 변경
	E get(int index)		반환		선택된 index 위치에 값 반환
	void remove(int index)	삭제		선택된 index 위치의 값 삭제
	void clear()		전체삭제		모든 데이터 삭제
	int size()			크기		저장된 데이터의 개수반환
	boolean contains(Object o)	검색		데이터 존재 여부 확인
	
ArrayList
	- ArrayList는 가장 많이 사용하는 List인터페이스의 대표적인 구현 클래스이다.
	- JDK 1.2부터 제공된 ArrayList는 내부적으로 배열을 이용해 구현되어 배열과의 호환성이 좋은 자료구조이다.
	
		List<데이터 타입> list = new ArrayList<데이터 타입>();

	JDK 1.7이후부터는 Collection의 선언이 간소화되었다.
		
		List<데이터 타입> list = new ArrayList<>();
	
	우측의 생성자를 통한 선언시 제네릭을 생략할 수 있다.


	LinkedList

	회원정보를 저장
	AraayList<String> name = new ArrayList<>();
	AraayList<Integer> age = new ArrayList<>();
	AraayList<String> address = new ArrayList<>();

	이름 이름2 이름3 			//List는 원하는 위치의 공간을 삭제할 수 있으며 빈 공백을 메우기 위해 뒤의 데이터들이 앞으로 이동한다.
	나이 나이2 나이3  ----------- 나이 2를 삭제시 나이 3이 나이 2자리로 앞으로 이동하게되어 잘못된 데이터가 나올수있다 
	주소 주소2 주소3  
	
	public class Person{
		String name; 		Person 클래스를생성후 Person타입 객체를만들어 이름과 나이를지정한 후 ArrayList에 저장하여 사용할 수 있다 .
		int age;
	}

 						

Set
	- List와는 달리 객체의 저장순서를 보장하지않는다 .
	- Set 컬렉션은 수학의 집합과 유사한 개념을 지니고 있다 .
	- List 컬렉션은 저장시 중복을 허용하지만 Set컬렉션은 데이터의 중복을 허용하지않는다 .
	- 데이터를 저장할 때 순서 , 즉 index를 부여하지 않기 때문에 데이터가 입력된 순서대로 출력된다는 보장이 없다 .

	Set 인터페이스에서 제공하는 메서드
	void add(E e)		데이터를 순차적으로 삽입
	void remove(Object o)	선택된 값 삭제
	void clear()		모든 데이터 삭제
	int size()			저장된 데이터의 개수 반환
	boolean contains(Object o)	데이터 존재 여부 확인



HashSet
	HashSet클래스는 Set인터페이스에서 가장 많이 사용되는 클래스로 인터페이스를 상속받아 구현된다


Iterrator (반복자)	
	Iterator 는 List 컬렉션에서 제공하는 인터페이스로 사전적인 의미로는  '반복하다 ' 라는 뜻을 지니고 있다 .
	List컬렉션의 요소를 순회하여 하나씩 추출하는데 사용한다 .
	반복자라고도 불리는 Iterator 객체는 선언된 컬렉션 객체에서 가져와 사용된다 .

	Iterator 메서드
	
	boolean hasNext()	다음에 순회할 데이터 유무 확인 가져올 객체가 있으면 true 없으면 false 반환 
	E next()		다음 위치의 데이터로 이동하여 반환



------------------------------------------------------------------------------
0814 오전정리

컬렉션 프레임워크 

List set map - interface (상수 ,추상메서드 ) (바로 객체생성 X ) 
구현한클래스
List		  set	    Map
ArrayList		HashSet	 HashMap
LinkedList
Vector 


List
- 요소를 계속 넣을수 있음 
- index 가 존재한다 .
- 중복된 데이터 허용
				
add(E e ) - > 맨뒤에 추가
add(int index, E e ) - > 원하는 위치에 추가 
set(int index, E e) - > 원하는 위치 수정
remove (int index)
remove (Object obj)
removeAll(Collection c) 삭제 후 true ,false 반환
clear () 삭제후 반환값x

LinkedList
node객체




ArrayList vs LinkedList
ArrayList -> 조회가 많은곳
LinkedList -> 추가,삭제가 빈번하게 일어나는곳  


제네릭 
- 타입을 미리 지정하는것이 아닌 객체가 만들어질때 타입을 설정하는것
- 타입을 파라미터(매개변수)로 가지는 클래스와 인터페이스 
public class 클래스명 <T> {


}
<T> = 타입 매개변수 


public interface 인터페스명 <T> {

}


HashSet
- 중복허용 X
- 순서대로 저장된다는 보장이 없음 
-
add()
remove() 

특정 객체가 컬렉션에 들어있냐
contains(Object obj) -T or F 반환


Iterator
반복자
컬렉션 요소를 순회하여 하나씩 추출하는 방식
생성한 List . Set 객체를 통해 iterator() 메서드를 통해서 객체를 생성한다 .

Iterator<Integer> iter = list.iterator();















ctrl shift o - import









