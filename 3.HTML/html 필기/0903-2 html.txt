<DocType html>
DOCTYPE은 Document Type 의 줄임말로 , 문서의 종류라는 뜻이다 .

시작태그와 닫는태그로 이루어져있다.
<태그명 속성 = "속성값"> ... </태그명>

html 주석
<!--내용-->


<html> ~ </html> 
이사이에 적힌 코드는 html 이다 라고 명시.

<head> ~ </head>
이 페이지의 meta정보를 포함한다 .
인코딩타입 ,제목 
초기 페이지 랜더링시 불러와야할 외부링크를 정의 

<body> ~ </body>
html문서에서 실질적으로 보이는 영역을 정의하는 구간
ex) 글 , 이미지 , 링크 , 테이블 등 


git 
버전관리 프로그램 
카카오톡 -> 버그수정 , 패치
버전을 저장한다 라는개념으로 이해하면 쉽다 .

git vs github

{git (local)
- 내 컴퓨터에서 이루어진다.
- 로컬 저장공간 .
commit - local 에 저장 

git init - > 특정폴더를 형상관리를 해라 || 초기화
//형상관리(Configuration Management) :  소프트웨어의 변경사항을 체계적으로 추적하고 통제하는 것
(https://velog.io/@welchs1423/%ED%98%95%EC%83%81%EA%B4%80%EB%A6%ACConfiguration-Management%EB%9E%80)

git add. -> 변경사항을 모두 stage 에 올림 (stage : 임시저장소)

git commit -m "메시지" -> 현재 버전을 git 에 저장 
} // 내컴퓨터(local) 안에서만 하는 작업

{github ( online )
- 온라인 저장공간  
레포지토리(repository) 만들기

내가올리려는 파일 
git remote add origin "repository url "

git push origin "branch name"



			
origin push
- local branch 를 원격 저장소 (remote repostiory) 로 푸시할 때 사용하는 기본명령어
git -  > origin push (GitHub로의 commit ) -> github ;  

clone : github -- local 로 복사 
pull : github repo - > 내 pc에 clone 된 repo 
pull은 clone이 전제로 되있어야 사용가능하다 .
repo 란 ? 
Repo란 필요시 여러가지 Git repository를 통합하여 Android 개발 workflow를 자동화합니다.


push , pull에대한 가벼운예시 .
1
나  push - >repo ( 나와 개 1 의 작업이 합쳐져있음 .)
개1  push 
2 
repo  pull -> 나 , 개 1 // 둘이 push 한 repo를  받게된다 .

버튼의 표현 - <button>
버튼을 표현할 때는 <button> 태그를 활용한다.
여는 태그와 닫는 태그사이에 입력한 문자가 버튼에 기재된다.
버튼도 block 속성이 있으므로 자동으로 줄바꿈 표현이된다 .

문서에 이미지 삽입하기 - <img> 
이미지는 웹 페이지의 필수 구성요소이다 .
당연하게도 image의 줄임말이다.
<img src = "이미지 경로 ">

이미지 경로는 컴퓨터 저장장치에 내의 파일경로를 입력해도 되고 외부이미지의 url을 입력해도 좋다 .

추상적 정보의 컨테이너  - <div>	 (관련있는것들끼리 묶어놓은것 .)
좌측에는 프로필 사진을 넣고 우측에는 아이디와 편집버튼을 넣고싶지만 뜻대로 되지 않는다 .
위치가 제멋대로인 이유는 현재 우리가 브라우저에게 전달해준 정보가 부족하기 때문이다 .
머리속에서 정보를 쪼개고 , 뭉치며 어떤 정보끼리 그룹지을지 고민하는 습관을 들여야한다 
머리속에서 쪼개놓은 정보를 브라우저에 전달할 때 사용하는 코드가 <div> 이다 .

정보의 단위 - <div>태그
태그 자체에는 별다른 기능이 없다 .
block 속성을 가져 자동으로 줄이 바뀐다 . 
<div> 는 다른정보를 담는 그릇으로 활용될 때 빛을 발하는 도구이다 .
<div> ~ </div> 사이에 정보를 입력하면 된다 .

<div> 
	정보 1
	정보 2
</div>

여기서 정보는 텍스트나 <img> 태그일 수도 있으며 , 심지어 태그가와도된다 .
정보를 뭉쳐둔 덩어리를 , 더 큰 덩어리의 일부로 사용하는것이다 .


추상적인 수준에서 정보를 분할하는 사실은 매력적인 행위지만 
<div> 태그를 css와 함께 활용할 때 비로소 정보를 정돈하여 전달하는 능력이 극대화된다 .
덕분에 <div>는 전세계의 모든 웹페이지에서 가장 자주 , 많이 등장하는 태그이다 .
프로필 사진과 이름 , 버튼 영역의 정보를 미리 쪼개보자 
<div>
	프로필사진
	<div>
		아이디
		버튼
	</div>
</div>

검색창 구현하기 -<input> 태그
사용자로부터 정보를 입력받을 수 있는 태그

HTML만 사용하면 기초적인 디자인의 홈페이지만 만들 수 있다 .
CSS를 공부하면 HTML로 제작한 홈페이지에 디자인적 요소를 추가해 더욱 아름다운 웹페이지를 제작할 수 있다 .


선택자

선택자의 종류
1. 태그
가장 손쉽게 사용할 수 있는 선택자
HTML 문서는 태그를 활용해 작성되기 떄문이다
HTML코드를 작성할 때 사용한 태그를 그대로 선택자로 활용
할 수 있으며 실제로 CSS코드를 사용할 때는 태그이름만을 사용한다 .

-가장 넓은 범위에 동시다발적으로 디자인을 적용하는 방법
- 예를들어 <div>태그를 선택자로 삼음녀 페이지 내의 모든 <div> 태그의 글자들에  CSS를 적용시킨다 .


클래스 선택자
- 클래스는 하나의 그룹이라는 뜻이다 .

<태그명 class="클래스명">
	컨텐츠
</태그명>

3. 아이디(id)
클래스와 달리 화면에 단 한개만 존재하는 속성
웹사이트에 중복되는 id를 만들 수 없듯이 html에서의 아이디도 비슷한 개념이다 .

<태그명 id="아이디값">
	내용
</태그명>


클래스와 아이디를 구분하는 이유
HTML의 정보전달력 향상에 있다.
다른사람이 만든 HTML코드를 처음 읽어야 하는경우
CLASS는 하나의 웹페이지에 여러번 등장할 수 있지만
ID의 경우 한번만 등장한다 .

HTML코드를 읽기만해도 어떤 정보가 반복되는지, 어떤 정보가 
단 한번만 등장하는 유일한 정보인지 구분할 수 있다 .

CSS사용해보기
1. style 속성을 사용한 css적용
시작태그에 style 속성을 부여해css를 적용시킬 수 있다 .

<태그명 style="어떤스타일 : 스타일값"> // 결함이 너무쎄다 .지양하는것이 좋음 

2. <style> 태그를 활용한 css의 적용
	<style>
		CSS문법 코드 작성
	</style> 

선택자{
	"어떤스타일 : 스타일값";
	"어떤스타일 : 스타일값";
		}

3. CSS코드를 별도의 파일로 분리하여 관리하기 
.css 확장자를 가진 파일을 만들고 안에 css 를 정의

css파일을 적용시키려는 곳에서 다음과같은 코드로 작성
<link href="경로"  rel = "stylesheet">


CSS 파일을 분리하는 이유 
가장 큰이유는 HTML파일 내에서 디자인과 관련된 정보를 제거할 수 있다는 점

HTML 코드가 정보의 전달과 웹 페이지의 구조 설계라는 본연의 기능에 집중할 수 있게된다.

협업의 편의성
잘하는 웹개발자들은 CSS를 직접 작성하여 본인의 생각대로 
직접 코드를 표현하는경우가 많다 .
의사소통을 한단계 생략하여 완벽히 의도대로 디자인을 구현할 수 있다 .



복합선택자 
HTML코드는 계층적 구조를 갖는다 .

복합선택자를 사용하는 이유
<P>
	<img src="강아지.jpg">
	<div>
		<img src ="햄스터.jpg>
</P>
<img src="고양이.jpg">

선택자를 연달아 쓰고 사이에 띄어쓰기를 한다 .
p img{

}
p태그 바로 아래에 있는 img에 css적용
p>img{

}


