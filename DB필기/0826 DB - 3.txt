데이터베이스 모델링

테이블을 생성하기 전에 어떻게 만들것인가에 대한 약속하는것.

고객쪽에서의 요구한 사항에대해 분석하고 설계하는것


데이터 모델링의 특징
	- 추상화 : 현실세계를 일정한 형식에 맞춰 간략하게 표현해야 합니다.
	- 단순화 : 누구나 쉽게 이해할 수 있도록 제한된 표기법이나 언어를 사용해야 합니다.
	- 명확화 : 명확하게 의미가 해석되어야 하고, 한 가지 의미만을 가져야 합니다.

1. 요구사항 분석
	- 내가 하려는 프로젝트의 기능 ,고객의 요청사항을 잘 분석을 해서 
	몇개의 테이블이 나올지 , 테이블마다 어떤 속성이 들어가게 될지 분석

2. 개념적 모델링
	- 각 테이블마다 어떤 관계를 맺는지 설정
	- ERD다이어그램을 생성한다  .
	피터챈 표기법
	엔티티 표기법
3. 논리적 모델링
	- 구체회된 업무중심의 데이터모델 생성
	- 제약조건,속성별 타입과 크기 설정
	- 정규화는 데이터 모델의 일관성확보 , 중복제거로 신뢰성있는 데이터구조를 얻는 목적이 있다. 
	

4. 물리적 모델링
	- 테이블을 어느 데이터베이스저장공간에 저장할건지 정하는 단계	
	- SQL로 구현을 하는단계

	최종적으로 데이터를 관리할 데이터베이스를 선택, 선택데이터베이스에 실제 테이블을 만드는작업
	시각적인 구조를 생성했으면 그것을 실제로SQL코딩을 통해 완성하는 단계
	모델링을 먼저하고 코드를 작성해야 오류를 줄일 수 있다 .
5. 구현



DDL
-CREATE
-DROP
-ALTER
-TRUNCATE

DML(DataManipulationLanguage) : 데이터 제의어,데이터 조작어

SELECT 
원하는데이터를 조회하기 위한 키워드

SELECT * FROM 테이블; -> 테이블에서 전체 컬럼에 대한 데이터 조회

SELECT 컬럼명1, 컬럼명2,.... FROM테이블 ; -> 테이블에서 컬럼1,컬럼2에대한 전체 데이터 조회 / 컬럼명을 하나씩 쓰는것이 조회속도가 더 빠르다



조건절
- 원하는 자료를 검색하기 위한 조건절
- WHERE절에서는 결과를 제한하기 위한 조건을 기술할 수 도있다.

WHERE조건식 ;
- 원하는 자료를 검색하기 위한 조건절 

컬럼명 비교연산자 값(문자,숫자,표현식)

조건식에서 NULL 사용

컬럼명 IS  NULL -> 해당컬럼에 NULL값이 들어가 있는 행을조회 //컬럼값이 NULL이면 참
 
컬럼명 IS NOT NULL -> 해당 컬럼에 NULL값이 안들어가있는 행을 조회 //컬럼값이 NULL이아니면 참 


AND -> 조건 AND 조건 
앞뒤의 조건을 모두 만족하는 데이터를 조회

OR -> 조건 OR 조건 
앞 또는 뒤 조건중 하나라도 만족하는 데이터를 조회


SQL 연산자 
BETWEEN -> 어떤 범위에 대해서 조회 WHERE 컬럼명 BETWEEN A AND B
IN - > OR 을 대신해서 사용하는 연산자, 특정값에 대해 조회 WHERE 컬럼명 IN(값,값,값)
LIKE - > 유사검색 , 특정문자열을 포함하고있는 데이터 조회 WHERE 컬럼명 LIKE '형식' %/_ 
WHERE 컬럼명 NOT LIKE '형식' %/_ : 포함하고있지않을경우 LIKE 앞에 NOT 붙여줌 .



테이블에 데이터 추가하기
INSERT INTO 테이블명 (컬럼명1,컬럼명2...) VALUES(값1,값2....) ;
DEFALUT 값을 넣고싶을 떄 

INSERT INTO 테이블명 VALUES(값1,값2,...) ;
무조건 컬럼의 개수만큼 값을 대입해야한다 .

다른테이블의 데이터를 조회해서 추가하기 
INSERT INTO 테이블명 (칼럼명1,칼럼명2...) 
SELLCT 컬럼1,컬럼2,...
FROM 테이블
WHERE 조건 ; -- 조건줘서 추가하는것도 가능 .


각각의 테이블에 데이터를 추가하기
INSERT ALL
	INTO 테이블A(컬럼1,컬럼2...)VALUES(값1,값2)
	INTO 테이블B(컬럼3,컬럼4...)VALUES(값3,값4)
SELECT*FROM DUAL;

조회 - > 테이블에 영향이 없음 
추가,삭제,수정 - > 테이블에 영향을 준다 .



DELETE 
조건에 맞는 데이터를 테이블에서 삭제 
- 행단위로 지움 *

DELETE FROM 테이블명 
WHERE조건식 컬럼명 =  값 ;

TRUNCATE 
테이블 안에있는 데이터를 싹 날린다 . 


수정하기
UPDATE 
- 테이블의 데이터를 수정할 때 사용하는 키워드
UPDATE 테이블명 SET
컬럼명 = 새로운값 ,
컬럼명 = 새로운값,
컬럼명 = 새로운값
WHERE 조건식 ;

조건식을 달지 않으면 테이블 전체에서 데이터가 수정된다 .

ORDER BY(정렬)
- 질의결과에 반환되는 행들을 특정 기준을 정렬하고자 할 때 사용
-ORDER BY절은 SELECT절의 가장마지막에 기술
-ASC: 오름차순 (DEFAULT이기떄문에 생략 가능)
-DESC :내림차순(생략불가능)

사용방법

FROM 테이블명 ORDERBY컬럼명 정렬방향 ;
FROM 테이블명 WHERE 조건식 ORDER BY 컬럼명 정렬방향 ;
FROM 테이블명 WHERE 조건식 ORDER BY 컬럼명 정렬방향 . 컬럼명 정렬방향

--------------------------------------------------------------------------

정규화  
- 모델링을 잘 하면서 테이블을 만들었지만 불필요한 컬럼이라던지 불필요한 요소를 걸러내는작업이다 .

- 1차~5차까지 존재하지만 정규화를 진행할 수록 테이블을 계속 불니하기 때문ㅇ ㅔ데이터를
가져오는 작업을 할 때 불편하다 .
- 그렇기 떄문에 보통 3차 정규화 작업까지만 진행한다 .

정규화의 이점
- 불필요한 데이터 반복을 제거함으로써 저장공간을 최소화 할 수 있으며 , 데이터의변경시
불일치성을 최소화 하고 , 연산작업을 최소화 할 수 있다 .

정규화 안된 테이블
- 1차정규화(도메인 원자값이어야 한다  .)
        ↓(1차정규화를 만족하며 부분함수 종속이 해소되어야함)
- 2차정규화(관련있는 컬럼끼리 테이블을 분리한다.)
        ↓(2차정규화를 만족하며 이행함수 종속이 해소되어야함)
- 3차정규화 (이행함수 종속을 쪼개서 따로 테이블로 만든다 .)
        ↓(3차를만족하며 모든 컬럼이 후보키가 되도록 테이블을 분해하는것)	이행함수 종속 : X->Y Y->Z  이란 종속관계가 있을 때  X->Z 가 성립하는것        ↓
- BCNF 정규화
        ↓
- 4차 정규화
        ↓
- 5차정규화


함수적 종속성
- 하나의 테이블에서 한 컬럼의 값(x)가 다른컬럼의 값(y)을 결정하는 관계
- 정규화가 잘된 테이블일수록 결정자X는 PK가 한개이고 종속자가 여러개인 구조를 가진다 .

완전함수 종속
- 종속자가 기본키에만 종속되며 , 기본키가 여러 속성으로 구성되어 있을 경우
- 기본키를 구성하는 모든 속성이 포함된 기본키의 부분집합에 종속된경우

부분함수 종속 
- 기본키가 복합키일 경우 기본키를 구성하는 속성중 일부에게 종속된 경우를 말한다 .



이행함수 종속
- 테이블에서 X,Y,Z라는 세개의 컬럼이 존재할 때 X-> Y , Y-Z 이란 종속관계가 있을 때 , X->Z가 성립되는 것 


이상현상 (Anormally)
삽입이상 - 새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제
갱신이상 - 중복 행 중 일부만 변경하여 데이터가 불일치 하게되는 모순의 문제 
삭제이상 - 행을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 문제 .

이상현상이 발생하는 이유는 테이블이 정규화가 되어있지 않기때문이다 .
정규화를 진행하기 위해서는 각 컬럼관의 관련성을 파악해야하는데 이 관련성을 "함수적 종속성" 이라고한다
그렇기에 하나의 테이블에서는 하나의 함수적 종속성만 존재하도록 정규화를 해야한다 .

정규화는 논리 모델링을 할 때 실시한다 .


-------------------------------------------------------------------------------------------
SQL 함수 
- 사용자가 필요한 기능을 만드는 함수가아닌 , 오라클 자체적으로 제공하는 함수 
- 이 상황에 맞는 적절한 함수를 사용하기 위해서는 어떤 기능을 하는 함수들이 존재하는지 정확하게 파악하고 있어야한다 .

내장함수의 종류

단일행 함수 : 한개의 행값이 함수에 적용되어 한개의 행을 반환한다
집계 함수 : 한개 이상의 행의값이 함수에 적용되어 한개의 값을 반환한다 .
--------------
0827 오전 정리
0827 정리

DML(Data Manipulation Language) : 데이터 조작어
조회 추가 수정 삭제 

어떻게 조회할거냐 ?

전체 테이블에서 , 특정 조건에서(WHERE), 정렬해서 (ORDER BY) ,~별로 분류해서 (LIKE  , 두개의 테이블에서 .

SELECT 컬럼 .. FROM 테이블명 ; 

INSERT INTO 테이블명 (컬럼,컬럼, ...) VALUES (값 , 값 ,...) -> DEFAULT 필요시 사용
INSERT INTO 테이블명 VALUES(값 , 값 ..) 

복사 -> 붙혀넣기
INSERT INTO 테이블명
SELECT 컬럼
FROM 테이블 ;

여러개의 테이블에 한번에 추가하기

INSERT ALL
 INTO 테이블명1 VALUES (값)
 INTO 테이블명2 VALUES (값)
SELECT * FROM DUAL ;

수정하기
 UPDATE 테이블명 SET
컬럼명 = 수정할값 ,
컬럼명 = 수정할값 ,
컬럼명 = 수정할값 ,
WHERE 조건식 ( 바꿔야할 행의 정보? )

삭제 

DELETE FROM 테이블명
WHERE 조건식 ;

정규화
함수적 종속성을 제거해서 이상현상을 제거하기 위한 행위
테이블이 분리
조회속도의 향상 

함수적 종속성
결정자x가종속자Y를 결정하는 관계

완전함수 종속
결정자는 기본키 1개
나머지는 종속자

부분함수 종속 
테이블에서 기본키가 복합키일때, 기본키를 구성하는 속성중 일부에게도 종속되는경우 

이행함수 종속 
X->Y Y->Z
X -> Z 

정규화
정규화가 되지않은 상태  (불필요한 컬럼,요소등을 걸러내는 작업 )

도메인을 원자값으로 바꿈 

1차정규화 1NF 도메인 원자값
부분함수 종속제거
2차정규화 2NF 
이행함수 종속제거
3차정규화 3NF
모든 컬럼이 후보키가 되도록 테이블분해

정규화를 했는데 오히려 성능이 떨어질 때 테이블을 통합하는 역정규화를 하기도한다


각 컬럼간의 관련성 파악 - 함수적 종속성
하나의 테이블에서는 하나의 함수적 종속성만 존재하도록 하기위해 정규화 필요
논리모델링단계에서 실시 .

이상현상(Anormally) - 테이블정규화가 이루어지지않아 발생 
삽입이상 - 데이터를 추가할 때 필요없는 데이터까지 추가하는 경우 .
갱신이상 - 중복행의경우 일부만 갱신해서 혼란을 초래하는 경우
삭제이상 - 행 삭제시 필요한정보까지 같이 삭제하는경우


문자함수 
ASCII()		문자의 ASCII값을 반환
CHR()		숫자 ASCII코드를 반환
RPAD()		왼쪽 정렬 후 오른쪽에 생긴 빈공백에 특정 문자를 채워 반환한다.
LPAD()		오른쪽 정렬 후 오른쪽에 생긴 빈공백에 특정 문자를 채워 반환한다.
TRIM()		문자열 공백 문자들을 삭제한다.
RTRIM()		문자열 오른쪽(뒤)의 공백 문자들을 삭제한다.
LTRIM()		문자열 왼쪽(뒤)의 공백 문자들을 삭제한다.
LOWER()		지정된 문자를 소문자로 반환한다.
UPPER()		지정된 문자를 대문자로 반환한다.
INSTR()		특정 문자의 위치를 반환한다.
INITCAP()		지정된 문자열의 첫 단어를 대문자로 나머지는 소문자로 반환한다.
SUBSTR()		시작 위치부터 선택 개수만큼 문자를 반환한다.
LENGTH()		문자열의 길이를 반환한다.
REPLACE()	첫 번째 파라미터로 지정한 문자를 두번째 파라미터로 지정한 문자로 바꿔준다.
CONCAT()	입력되는 두 문자열을 연결하여 반환한다.




















